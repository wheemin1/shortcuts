📋 프로젝트 개요
ShortcutHub는 다양한 소프트웨어 도구들의 단축키 정보를 한 곳에 모아 검색, 필터링, 즐겨찾기 등의 기능을 제공하는 웹 애플리케이션입니다. 사용자가 효율적으로 단축키를 찾고 관리할 수 있도록 돕는 도구입니다.

🏗️ 기술 스택
Frontend
React 18.3.1 + TypeScript - 메인 프론트엔드 프레임워크
Vite - 빌드 도구 및 개발 서버
Tailwind CSS - 스타일링 프레임워크
Radix UI - 접근성 기반 UI 컴포넌트 라이브러리
shadcn/ui - 사전 구성된 UI 컴포넌트 시스템
Wouter - 경량 라우터 라이브러리
TanStack Query - 서버 상태 관리 라이브러리
Lucide React - 아이콘 라이브러리
Framer Motion - 애니메이션 라이브러리
Backend
Node.js + Express - 서버 프레임워크
TypeScript - 타입 안전성
Drizzle ORM - 데이터베이스 ORM
PostgreSQL - 데이터베이스 (NeonDB)
Zod - 스키마 검증 라이브러리
WebSocket - 실시간 통신 지원
개발 도구
tsx - TypeScript 실행 환경
ESBuild - 번들링 도구
Drizzle Kit - 데이터베이스 마이그레이션 도구
📁 프로젝트 구조
🎯 주요 기능
1. 단축키 검색 및 필터링
전체 텍스트 검색: 단축키 제목, 설명, 태그로 검색
카테고리별 필터링: OS, IDE, 오피스, 디자인, 브라우저, 미디어 등
운영체제별 필터링: Windows, macOS, Linux
도구별 그룹화: 같은 도구의 단축키들을 그룹으로 표시
2. 즐겨찾기 시스템
즐겨찾기 추가/제거: 자주 사용하는 단축키를 즐겨찾기에 추가
즐겨찾기 전용 보기: 즐겨찾기한 단축키만 별도로 확인
로컬 스토리지 저장: 브라우저에 즐겨찾기 정보 저장
3. 단축키 복사 기능
클립보드 복사: 단축키를 클릭하여 클립보드에 복사
토스트 알림: 복사 성공/실패 시 알림 표시
4. 다크 모드 지원
테마 전환: 라이트/다크 모드 토글
로컬 스토리지 저장: 사용자 선호도 기억
5. 반응형 디자인
모바일 친화적: 다양한 화면 크기에 최적화
사이드바 토글: 모바일에서 사이드바 접기/펼치기
🗄️ 데이터베이스 스키마
shortcuts 테이블
favoriteShortcuts 테이블
shortcutUsage 테이블
📡 API 엔드포인트
단축키 관련
GET /api/shortcuts - 모든 단축키 조회
GET /api/shortcuts/:id - 특정 단축키 조회
GET /api/shortcuts/category/:category - 카테고리별 단축키 조회
GET /api/shortcuts/tool/:tool - 도구별 단축키 조회
GET /api/shortcuts/search?q=query - 단축키 검색
GET /api/shortcuts/popular - 인기 단축키 조회
POST /api/shortcuts - 새 단축키 추가
PUT /api/shortcuts/:id - 단축키 수정
DELETE /api/shortcuts/:id - 단축키 삭제
즐겨찾기 관련
GET /api/favorites/:userId - 사용자 즐겨찾기 조회
POST /api/favorites - 즐겨찾기 추가
DELETE /api/favorites/:shortcutId/:userId - 즐겨찾기 제거
사용량 추적
POST /api/shortcuts/:id/usage - 단축키 사용량 추적
🎨 UI/UX 특징
컴포넌트 구조
재사용 가능한 UI 컴포넌트: shadcn/ui 기반으로 구성
접근성 고려: Radix UI를 통한 키보드 내비게이션 지원
일관된 디자인 시스템: Tailwind CSS 기반 스타일링
사용자 경험
즉시 피드백: 토스트 알림으로 사용자 액션에 대한 즉각적인 피드백
로딩 상태 관리: 데이터 로딩 중 스피너 표시
에러 핸들링: 네트워크 에러 시 재시도 버튼 제공
🚀 성능 및 최적화
클라이언트 사이드
React Query 캐싱: 서버 데이터 캐싱으로 불필요한 요청 최소화
코드 분할: 라우팅 기반 코드 분할 (현재는 단순하지만 확장 가능)
최적화된 번들링: Vite를 통한 빠른 개발 및 최적화된 프로덕션 빌드
서버 사이드
메모리 기반 스토리지: 현재는 메모리에 데이터 저장 (개발용)
PostgreSQL 연동: 프로덕션 환경에서는 PostgreSQL 사용
API 응답 최적화: 필요한 데이터만 전송
🔧 개발 환경 설정
개발 서버 실행
빌드 및 배포
데이터베이스 관련
📊 데이터 관리
초기 데이터
포괄적인 단축키 데이터: 주요 소프트웨어 도구들의 단축키 정보
다국어 지원: 한국어 기반 인터페이스
카테고리화: 체계적인 분류 시스템
데이터 일관성
Zod 스키마 검증: 런타임 데이터 검증
TypeScript 타입 안전성: 컴파일 타임 타입 검사
공유 스키마: 프론트엔드와 백엔드 간 타입 공유
🔮 확장 가능성
기능 확장
사용자 인증: 개인 계정 기반 즐겨찾기 관리
단축키 기여: 커뮤니티 기반 단축키 추가
학습 모드: 단축키 학습 및 연습 기능
통계 대시보드: 사용량 및 인기도 분석
기술적 확장
실시간 업데이트: WebSocket을 통한 실시간 데이터 동기화
검색 개선: 전문 검색 엔진 (Elasticsearch) 연동
캐싱 최적화: Redis를 통한 고성능 캐싱
마이크로서비스: 기능별 서비스 분리
🏆 프로젝트 장점
현대적인 기술 스택: 최신 React와 TypeScript 사용
체계적인 구조: 명확한 폴더 구조와 코드 분리
사용자 친화적: 직관적인 UI/UX 디자인
확장성: 모듈화된 구조로 기능 확장 용이
타입 안전성: 전체 애플리케이션에서 TypeScript 활용
성능 최적화: 적절한 캐싱 및 최적화 기법 적용
이 프로젝트는 단축키 정보를 체계적으로 관리하고 사용자에게 편리한 검색 및 관리 기능을 제공하는 잘 구성된 웹 애플리케이션입니다.